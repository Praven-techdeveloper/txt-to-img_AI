# -*- coding: utf-8 -*-
"""txt to img sona.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1My6ELMDLr90YoRMbwKs9OauCnME0HzNx
"""

!pip install diffusers transformers accelerate scipy safetensors

import torch
from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler, EulerDiscreteScheduler, LMSDiscreteScheduler, DDIMScheduler
from google.colab import files
from IPython.display import display, clear_output
import ipywidgets as widgets
import random

# Available realistic models
MODELS = {
    "Realistic Vision V5.1": "SG161222/Realistic_Vision_V5.1_noVAE",
    "Deliberate V2": "XpucT/Deliberate",
    "Epic Realism": "johnslegers/epicrealism",
    "Juggernaut XL": "stablediffusionapi/juggernaut-xl-v8",
    "Stable Diffusion 2.1": "stabilityai/stable-diffusion-2-1"
}

# Set up UI
model_dropdown = widgets.Dropdown(
    options=list(MODELS.keys()),
    value="Realistic Vision V5.1",
    description="Model:"
)
scheduler_dropdown = widgets.Dropdown(
    options=["DPMSolverMultistep", "Euler", "LMS", "DDIM"],
    value="DPMSolverMultistep",
    description="Scheduler:"
)
prompt_input = widgets.Text(
    description="Prompt:",
    value="photorealistic portrait of a woman, sharp focus, 8k resolution",
    layout=widgets.Layout(width="600px")
)
negative_prompt = widgets.Text(
    description="Avoid:",
    value="blurry, cartoon, drawing, painting, deformed",
    layout=widgets.Layout(width="600px"))
steps_slider = widgets.IntSlider(value=28, min=15, max=50, step=1, description="Steps:")
cfg_slider = widgets.FloatSlider(value=7.0, min=1, max=20, step=0.5, description="CFG Scale:")
quality_boost = widgets.Checkbox(value=True, description="Auto Quality Boost")
generate_btn = widgets.Button(description="üöÄ Generate", button_style="primary")
output = widgets.Output()

# Quality enhancement function
def enhance_prompt(prompt, quality_boost_enabled):
    """Add quality descriptors to the prompt"""
    quality_tags = [
        "8k resolution", "ultra detailed", "sharp focus", "professional photography",
        "high quality", "intricate details", "cinematic lighting", "photorealistic"
    ]

    if quality_boost_enabled:
        # Select 3-5 random quality tags
        selected_tags = random.sample(quality_tags, k=random.randint(3,5))
        return f"{prompt}, {', '.join(selected_tags)}"
    return prompt

# Model loading function
def load_model(model_name):
    model_id = MODELS[model_name]
    print(f"Loading {model_name} ({model_id})...")

    pipe = StableDiffusionPipeline.from_pretrained(
        model_id,
        torch_dtype=torch.float16,
        safety_checker=None,
        variant="fp16"
    ).to("cuda")

    return pipe

# Scheduler mapping
SCHEDULERS = {
    "DPMSolverMultistep": DPMSolverMultistepScheduler,
    "Euler": EulerDiscreteScheduler,
    "LMS": LMSDiscreteScheduler,
    "DDIM": DDIMScheduler
}

def set_scheduler(pipe, scheduler_name):
    scheduler_class = SCHEDULERS[scheduler_name]
    pipe.scheduler = scheduler_class.from_config(pipe.scheduler.config)
    return pipe

# Generate function
def generate_image(b):
    with output:
        clear_output()
        model_name = model_dropdown.value
        scheduler_name = scheduler_dropdown.value
        base_prompt = prompt_input.value
        neg_prompt = negative_prompt.value

        # Enhance prompt with quality tags
        final_prompt = enhance_prompt(base_prompt, quality_boost.value)

        print(f"Final prompt: {final_prompt}")

        try:
            print(f"Loading model: {model_name}...")
            pipe = load_model(model_name)
            pipe = set_scheduler(pipe, scheduler_name)

            # Enable optimizations
            pipe.enable_xformers_memory_efficient_attention()

            print(f"Generating with {scheduler_name} scheduler...")
            image = pipe(
                final_prompt,
                negative_prompt=neg_prompt,
                height=768,
                width=768,
                num_inference_steps=steps_slider.value,
                guidance_scale=cfg_slider.value,
                num_images_per_prompt=1
            ).images[0]

            image.save("output.png")
            display(image)
            files.download("output.png")
            print("‚úÖ Done! Image saved and downloaded.")

        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
            print("üîÑ Trying fallback model...")
            try:
                # Fallback to SD 2.1
                print("Loading fallback model: Stable Diffusion 2.1...")
                pipe = load_model("Stable Diffusion 2.1")
                pipe = set_scheduler(pipe, scheduler_name)
                pipe.enable_xformers_memory_efficient_attention()

                print("Generating with fallback model...")
                image = pipe(
                    final_prompt,
                    negative_prompt=neg_prompt,
                    height=768,
                    width=768,
                    num_inference_steps=steps_slider.value,
                    guidance_scale=cfg_slider.value
                ).images[0]

                image.save("output.png")
                display(image)
                files.download("output.png")
                print("‚úÖ Done with fallback model!")

            except Exception as e2:
                print(f"‚ùå Fallback failed: {str(e2)}")

generate_btn.on_click(generate_image)

# Display UI
display(widgets.VBox([
    widgets.HTML("<h1 style='text-align:center; color:#2563eb'>üì∏ AI Photorealistic Generator</h1>"),
    widgets.HTML("<p style='text-align:center'>Create stunning realistic images with quality enhancement</p>"),
    model_dropdown,
    scheduler_dropdown,
    prompt_input,
    negative_prompt,
    widgets.HBox([steps_slider, cfg_slider]),
    quality_boost,
    generate_btn,
    output,
    widgets.HTML("""
    <style>
    table {width: 100%; margin-top: 20px; border-collapse: collapse;}
    th, td {border: 1px solid #ddd; padding: 8px; text-align: left;}
    tr:nth-child(even) {background-color: #f2f2f2;}
    .quality-badge {background-color: #e0f2fe; padding: 3px 6px; border-radius: 4px;}
    </style>

    <h3>üåü Quality Enhancement System:</h3>
    <p>When <b>Auto Quality Boost</b> is enabled, we automatically add these professional photography tags:</p>

    <div style="display: flex; flex-wrap: wrap; gap: 8px; margin: 15px 0;">
        <span class="quality-badge">8k resolution</span>
        <span class="quality-badge">ultra detailed</span>
        <span class="quality-badge">sharp focus</span>
        <span class="quality-badge">professional photography</span>
        <span class="quality-badge">high quality</span>
        <span class="quality-badge">intricate details</span>
        <span class="quality-badge">cinematic lighting</span>
        <span class="quality-badge">photorealistic</span>
        <span class="quality-badge">masterpiece</span>
        <span class="quality-badge">best quality</span>
    </div>

    <h3>üí° Pro Tips for Realistic Images:</h3>
    <ul>
        <li><b>Start with "photorealistic" or "photo of"</b> to set the style</li>
        <li><b>Specify camera details:</b> "85mm lens", "f/1.8 aperture", "shallow depth of field"</li>
        <li><b>Describe lighting:</b> "golden hour", "soft natural light", "studio lighting"</li>
        <li><b>Add texture details:</b> "detailed skin pores", "fabric texture", "water droplets"</li>
        <li><b>Use negative prompts:</b> "cartoon, drawing, painting, blurry, deformed"</li>
    </ul>

    <h3>üìù Example Prompts:</h3>
    <ul>
        <li>"photorealistic portrait of elderly woman, detailed wrinkles, soft natural window light, 85mm lens"</li>
        <li>"8k ultra detailed landscape of Swiss alps at sunset, majestic mountains, lake reflection, cinematic view"</li>
        <li>"macro photo of water droplet on leaf, morning dew, bokeh background, intricate details, sharp focus"</li>
        <li>"modern architecture interior, floor-to-ceiling windows, minimalist furniture, afternoon sunlight, professional photography"</li>
        <li>"wildlife photo of lion in savanna, golden hour lighting, detailed fur, telephoto lens"</li>
    </ul>
    """)
]))